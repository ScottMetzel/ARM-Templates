{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workbookDisplayName": {
            "type": "string",
            "defaultValue": "Performance - Multi-Select",
            "metadata": {
                "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
            }
        },
        "workbookType": {
            "type": "string",
            "defaultValue": "workbook",
            "metadata": {
                "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
            }
        },
        "workbookSourceId": {
            "type": "string",
            "defaultValue": "azure monitor",
            "metadata": {
                "description": "The id of resource instance to which the workbook will be associated"
            }
        },
        "workbookId": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "The unique guid for this workbook instance"
            }
        }
    },
    "resources": [
        {
            "name": "[parameters('workbookId')]",
            "type": "microsoft.insights/workbooks",
            "location": "[resourceGroup().location]",
            "apiVersion": "2022-04-01",
            "dependsOn": [],
            "kind": "shared",
            "properties": {
                "displayName": "[parameters('workbookDisplayName')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"# Performance Analysis\"},\"name\":\"Performance Analysis - Header\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Select Workspaces and Computers\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"688dc7cb-bea3-41ae-ae94-32d22e09568c\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DefaultWorkspace\",\"type\":5,\"isRequired\":true,\"value\":\"value::1\",\"isHiddenWhenLocked\":true,\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"additionalResourceOptions\":[\"value::1\"]}},{\"id\":\"c11b5651-cf86-4865-b23d-9ecc4f16b712\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ContextFree\",\"type\":1,\"query\":\"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"\\\\\\\"{DefaultWorkspace}\\\\\\\"\\\"}\",\"isHiddenWhenLocked\":true,\"queryType\":8},{\"id\":\"bbbc300a-6f91-4b2b-b4b5-842b4bf8577a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Selection\",\"type\":1,\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| extend match = strcat(\\\"'\\\", id, \\\"'\\\") =~ \\\"{DefaultWorkspace:value}\\\"\\r\\n| order by match desc, name asc\\r\\n| take 1\\r\\n| project value = tostring(pack('sub', subscriptionId, 'rg', resourceGroup, 'ws', id))\",\"crossComponentResources\":[\"value::all\"],\"isHiddenWhenLocked\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"above\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"conditionalVisibility\":{\"parameterName\":\"_\",\"comparison\":\"isEqualTo\",\"value\":\"_\"},\"name\":\"parameters - 0\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Subscriptions}\"],\"parameters\":[{\"id\":\"1db5ee15-fe52-458b-91d1-7ee39d8c2cd3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscriptions\",\"type\":6,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"summarize by subscriptionId\\r\\n| project value = strcat('/subscriptions/', subscriptionId), label = subscriptionId, selected = iff(subscriptionId =~ todynamic('{Selection}').sub, true, false)\",\"crossComponentResources\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"9732eff8-fb57-4cbd-8ade-5ae746f33760\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workspaces\",\"type\":5,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| summarize by id, name\\r\\n| project id, selected = iff(id =~ todynamic('{Selection}').ws, true, false)\",\"crossComponentResources\":[\"{Subscriptions}\"],\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"additionalResourceOptions\":[],\"showDefault\":false},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"value\":[\"/subscriptions/225d8fd1-bd45-4959-8ccf-28a626893d92/resourceGroups/Prod-RG-VMInsights-01/providers/Microsoft.OperationalInsights/workspaces/Prod-LAW-VMInsights-01\"]},{\"id\":\"5f8cce4b-9c4c-47da-8683-7e5ccc9faed3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"value\":{\"durationMs\":5184000000}},{\"id\":\"d6de19ff-cde4-41c2-9fba-b441312ea5c9\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Test\",\"label\":\"Not Onboarded\",\"type\":1,\"query\":\"let sm = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n| where TimeGenerated {TimeRange}\\r\\n| take 1;\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| take 1\\r\\n| union sm\\r\\n| summarize count()\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"41bb3710-5e9e-4b66-91fd-e11435899880\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ComputerNameContains\",\"label\":\"Computer Name\",\"type\":5,\"description\":\"This will filter the computers whose name contains the keyword. This will query all the machines in the workspace.\",\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"InsightsMetrics\\r\\n| summarize by Computer, _ResourceId\\r\\n| order by Computer\\r\\n| project _ResourceId\",\"crossComponentResources\":[\"{Workspaces}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"b533865a-3539-42b1-8dcd-33ca0d481c2a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ComputerFilter\",\"type\":1,\"query\":\"{\\\"version\\\":\\\"1.0.0\\\",\\\"content\\\":\\\"{\\\\\\\"snippet\\\\\\\": \\\\\\\"| where _ResourceId in ({ComputerNameContains})\\\\\\\"}\\\",\\\"transformers\\\":null}\",\"isHiddenWhenLocked\":true,\"queryType\":8}],\"style\":\"above\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 2\"},{\"type\":1,\"content\":{\"json\":\"⚠ A subscription has not yet been selected. Select a subscription under the `Subscriptions` dropdown or refresh the workbook.\"},\"conditionalVisibility\":{\"parameterName\":\"Subscriptions\",\"comparison\":\"isEqualTo\",\"value\":null},\"name\":\"text - 29\"},{\"type\":1,\"content\":{\"json\":\"⚠ Your workspace `{Workspaces:label}` does not have the necessary information for the specified time period (`{TimeRange:label}`) to show performance metrics. Try a broader time range, select a different workspace, or onboard virtual machines to the selected workspace.\\r\\n\\r\\nIf you choose to onboard virtual machines to workspace `{Workspaces:label}`, follow the instruction in the following link: [Azure Monitor for VMs (preview)](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/vminsights-overview).\"},\"conditionalVisibility\":{\"parameterName\":\"Test\",\"comparison\":\"isEqualTo\",\"value\":null},\"name\":\"text - 3\"},{\"type\":1,\"content\":{\"json\":\"There are no performance counters, either onboard machines to this workspace or enable performance counters.\"},\"conditionalVisibilities\":[{\"parameterName\":\"CounterTest\",\"comparison\":\"isEqualTo\",\"value\":\"\"},{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"top100\"}],\"name\":\"text - 7\"}],\"exportParameters\":true},\"customWidth\":\"100\",\"name\":\"Select Workspaces and Computers\",\"styleSettings\":{\"margin\":\"0\",\"padding\":\"0\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"Performance by Counter and Aggregates\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"fe9b7009-959b-4676-bb50-406374973e65\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Counter\",\"type\":2,\"description\":\"Select a VM performance counter for the table below\",\"query\":\"InsightsMetrics\\r\\n| summarize by Namespace, Name, CounterText = Name\\r\\n| order by Name asc, Namespace asc\\r\\n| project Counter = pack('counter', Name, 'object', Namespace), CounterText, group = Namespace\",\"crossComponentResources\":[\"{Workspaces}\"],\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":null},{\"id\":\"0fcb31a9-7375-4dda-a3a6-688f9bee35f9\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"CounterText\",\"type\":1,\"query\":\"let metric = dynamic({Counter});\\r\\nrange Steps from 1 to 1 step 1\\r\\n| project strcat(metric.object, \\\" > \\\", metric.counter)\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"38f9e915-f272-487e-8cbd-4657820461f7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Aggregators\",\"type\":2,\"description\":\"Select one or more different aggregates to display in the table below\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Average\\\", \\\"label\\\":\\\"Average\\\", \\\"selected\\\": true },\\r\\n    { \\\"value\\\":\\\"P5th\\\", \\\"label\\\":\\\"P5th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P10th\\\", \\\"label\\\":\\\"P10th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P50th\\\", \\\"label\\\":\\\"P50th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P80th\\\", \\\"label\\\":\\\"P80th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P90th\\\", \\\"label\\\":\\\"P90th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P95th\\\", \\\"label\\\":\\\"P95th\\\", \\\"selected\\\": true },\\r\\n    { \\\"value\\\":\\\"Min\\\", \\\"label\\\":\\\"Min\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"Max\\\", \\\"label\\\":\\\"Max\\\", \\\"selected\\\": true }\\r\\n]\",\"value\":[\"Average\",\"P95th\",\"Max\",\"P10th\",\"P50th\",\"P80th\",\"P90th\",\"P5th\",\"Min\"]},{\"id\":\"e6cbd765-0179-4b15-be3d-79363a2475aa\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TableTrend\",\"type\":2,\"description\":\"Select a percentile to display in the Trend column in the table below\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Average = round(avg(Val), 2)\\\", \\\"label\\\":\\\"Average\\\", \\\"selected\\\": true },\\r\\n    { \\\"value\\\":\\\"P5th = round(percentile(Val, 5), 2)\\\", \\\"label\\\":\\\"P5th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P10th = round(percentile(Val, 10), 2)\\\", \\\"label\\\":\\\"P10th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P50th = round(percentile(Val, 50), 2)\\\", \\\"label\\\":\\\"P50th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P80th = round(percentile(Val, 80), 2)\\\", \\\"label\\\":\\\"P80th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P90th = round(percentile(Val, 90), 2)\\\", \\\"label\\\":\\\"P90th\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":\\\"P95th = round(percentile(Val, 95), 2)\\\", \\\"label\\\":\\\"P95th\\\", \\\"selected\\\": false }\\r\\n]\",\"value\":\"P80th = round(percentile(Val, 80), 2)\"},{\"id\":\"4ae04c71-b163-4851-8cd7-c8fbf1699414\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"tableTrendOrder\",\"type\":1,\"query\":\"range Steps from 1 to 1 step 1\\r\\n| project value = iff('{TableTrend}' contains 'P5th'  or '{TableTrend}' contains 'P10th', 'asc', 'desc')\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"b34e468e-191b-421c-bc59-88e465befb5f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"mergedAggregators\",\"type\":1,\"query\":\"let aggregators = iff('{Aggregators}' contains '{TableTrend:label}', '{Aggregators}', '{Aggregators},{TableTrend:label}');\\r\\nrange Steps from 1 to 1 step 1\\r\\n| project aggregators\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"ce00f0fe-9580-41d7-8d50-3f897d5b28ce\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ShowTable\",\"type\":1,\"query\":\"print iff(\\\"{Test:value}\\\" == \\\"\\\", \\\"False\\\", \\\"True\\\")\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"1c5a9b10-e234-421d-a02f-6de16de3fc33\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"CounterTest\",\"type\":1,\"query\":\"InsightsMetrics\\r\\n| take 1\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 6 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let maxResultCount = 100; let metric = dynamic({Counter}); let summaryPerComputer = totable(InsightsMetrics   {ComputerFilter}    | where Namespace == metric.object and Name == metric.counter     | summarize hint.shufflekey = Computer Average = avg(Val), Max = max(Val), Min = min(Val), percentiles(Val, 5, 10, 50, 80, 90, 95) by Computer      | project Computer, Average, Max, Min, P5th = percentile_Val_5, P10th = percentile_Val_10, P50th = percentile_Val_50, P80th = percentile_Val_80, P90th = percentile_Val_90, P95th = percentile_Val_95      | order by {TableTrend:label} {tableTrendOrder}, Computer      | limit maxResultCount);  let computerList = summaryPerComputer      | project Computer;  let MachineSummary = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')     | where TimeGenerated {TimeRange}     | where Computer in (computerList)     | summarize arg_max(TimeGenerated, *) by Computer     | project Computer, MachineSummary = pack('Fully Qualified Domain Name', Computer, 'OS Type', OperatingSystemFamily, 'Operating System', OperatingSystemFullName, 'Ipv4 Addresses', Ipv4Addresses,         'Ipv6 Addresses', Ipv6Addresses, 'Mac Addresses', MacAddresses, 'DNS Names', DnsNames, 'CPUs', strcat(Cpus, ' @ ', CpuSpeed, ' MHz'), 'Bitness', Bitness,         'Physcial Memory', strcat(PhysicalMemoryMB, ' MB'), 'Virtualization State', VirtualizationState, 'VM Type', VirtualMachineType, 'OMS Agent', split(Machine, 'm-')[1]); let EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) []; let OmsNodeIdentityAndProps = computerList     | extend NodeId = Computer     | extend Priority = 1     | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer); let ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')     | where TimeGenerated {TimeRange}     | where Computer in (computerList)     | summarize arg_max(TimeGenerated, *) by Computer     | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2; let NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                                 | summarize arg_max(Priority, *) by Computer;  let NodeIdentityAndPropsMin = NodeIdentityAndProps     | extend Type = iff(NodeProps.type == 'StandAloneNode', iff(NodeProps.azureResourceId == '', 'Non-Azure Virtual Machine', 'Azure Virtual Machine'), NodeProps.type),      ResourceId = iff(NodeProps.type == 'AzureScaleSetNode', NodeProps.vmScaleSetResourceId,          iff(NodeProps.type == 'AzureCloudServiceNode', NodeProps.cloudServiceDeploymentId, Computer)),     ResourceName = iff(NodeProps.type == 'AzureScaleSetNode', strcat(NodeProps.vmScaleSetName, ' | ', NodeProps.scaleSetInstanceId),          iff(NodeProps.type == 'AzureCloudServiceNode', strcat(NodeProps.cloudServiceRoleName, ' | ', NodeProps.cloudServiceInstanceId), Computer))     | project Computer, Type, ResourceId, ResourceName; let trend = InsightsMetrics          | where TimeGenerated {TimeRange}         | where Computer in (computerList)          | where Namespace == metric.object and Name == metric.counter        | make-series {TableTrend} default = 0 on TimeGenerated from {TimeRange:start} to {TimeRange:end} step {TimeRange:grain} by Computer     | project Computer, ['Trend ({TableTrend:label})'] = {TableTrend:label}; summaryPerComputer     | join kind=leftouter (trend) on Computer     | join kind=leftouter (NodeIdentityAndProps) on Computer     | join kind=leftouter (NodeIdentityAndPropsMin) on Computer     | join kind=leftouter (MachineSummary) on Computer     | project ResourceName, Type, {mergedAggregators}, ['Trend ({TableTrend:label})'], Properties = MachineSummary     | sort by {TableTrend:label} {tableTrendOrder}\\r\\n\",\"size\":1,\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Type\",\"formatter\":1,\"formatOptions\":{}},{\"columnMatch\":\"Average\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"P50th\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Trend (Average)\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Properties\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkLabel\":\"ℹ️ Info\"}},{\"columnMatch\":\"P95th\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"P5th\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"P10th\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"P80th\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"P90th\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Min\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Max\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blue\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},{\"columnMatch\":\"Trend (P95th)\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Trend (P5th)\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Trend (P90th)\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Trend (P80th)\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Trend (P50th)\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"Trend (P10th)\",\"formatter\":10,\"formatOptions\":{\"palette\":\"blue\"}}]}},\"name\":\"Performance as a Table\"}],\"exportParameters\":true},\"customWidth\":\"100\",\"name\":\"Performance by Counter and Aggregates\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## CPU, Memory, Network, and Disk Metrics\"},\"customWidth\":\"100\",\"name\":\"text - 12 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"92358ae0-d5e1-494b-b65b-6d904f1325c5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Aggregate\",\"label\":\"Select Aggregate Value\",\"type\":2,\"isRequired\":true,\"isGlobal\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"Average = round(avg(Val), 2)\\\", \\\"label\\\":\\\"Average\\\", \\\"selected\\\":true},\\r\\n    { \\\"value\\\":\\\"P5th = round(percentile(Val, 5), 2)\\\", \\\"label\\\":\\\"P5th\\\"},\\r\\n    { \\\"value\\\":\\\"P10th = round(percentile(Val, 10), 2)\\\", \\\"label\\\":\\\"P10th\\\"},\\r\\n    { \\\"value\\\":\\\"P50th = round(percentile(Val, 50), 2)\\\", \\\"label\\\":\\\"P50th\\\"},\\r\\n    { \\\"value\\\":\\\"P80th = round(percentile(Val, 80), 2)\\\", \\\"label\\\":\\\"P80th\\\"},\\r\\n    { \\\"value\\\":\\\"P90th = round(percentile(Val, 90), 2)\\\", \\\"label\\\":\\\"P90th\\\"},\\r\\n    { \\\"value\\\":\\\"P95th = round(percentile(Val, 95), 2)\\\", \\\"label\\\":\\\"P95th\\\"}\\r\\n]\"},{\"id\":\"27345375-4376-4e2f-8ac4-59d4eab9d235\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"aggregateOrderLeft\",\"type\":1,\"isGlobal\":true,\"query\":\"range Steps from 1 to 1 step 1\\r\\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"4d9ba0ec-9d22-4fec-9f85-4be334f42d91\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"aggregateLeftValue\",\"type\":1,\"isRequired\":true,\"isGlobal\":true,\"query\":\"print \\\"{Aggregate:value}\\\"\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"50242f48-6c7d-449b-ad93-838c94e615a0\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"aggregateLeftLabel\",\"type\":1,\"isRequired\":true,\"isGlobal\":true,\"query\":\"print \\\"{Aggregate:label}\\\"\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"cb2f8744-0963-4cab-aee3-381e731904bf\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"aggregateOrder\",\"type\":1,\"isGlobal\":true,\"query\":\"range Steps from 1 to 1 step 1\\r\\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"100\",\"name\":\"parameters - 14\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"a23b29a5-5e4a-4d8e-ba73-bfdf27b2980e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"aggregateOrderRight\",\"type\":1,\"isGlobal\":true,\"query\":\"range Steps from 1 to 1 step 1\\r\\n| project value = iff('{Aggregate}' contains 'P5th'  or '{Aggregate}' contains 'P10th', 'asc', 'desc')\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"cc8dfabc-9eb9-4227-97bb-f5e9319030ec\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"aggregateRightValue\",\"type\":1,\"isRequired\":true,\"isGlobal\":true,\"query\":\"print \\\"{Aggregate:value}\\\"\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"ff7a79ff-742a-4c6e-8628-c52f45b3bf71\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"aggregateRightLabel\",\"type\":1,\"isRequired\":true,\"isGlobal\":true,\"query\":\"print \\\"{Aggregate:label}\\\"\",\"crossComponentResources\":[\"{Workspaces}\"],\"isHiddenWhenLocked\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"100\",\"name\":\"parameters - 15\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"### CPU\"},\"customWidth\":\"100\",\"name\":\"text - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let cpuSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n   | where TimeGenerated {TimeRange}\\r\\n    | where (Namespace == 'Processor' and Name == 'UtilizationPercentage')\\r\\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer, Name\\r\\n    //| top 10 by {aggregateLeftLabel} {aggregateOrderLeft}\\r\\n    );\\r\\nlet computerList=(cpuSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where (Namespace == 'Processor' and Name == 'UtilizationPercentage')\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"CPU Utilization %\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"unit\":1,\"min\":0,\"max\":100}}},\"customWidth\":\"100\",\"name\":\"CPU Utilization %\"}]},\"customWidth\":\"100\",\"name\":\"CPU Metrics\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"### Memory\"},\"customWidth\":\"100\",\"name\":\"text - 12 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let memorySummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == 'Memory' and Name == 'AvailableMB'\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(memorySummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'Memory' and Name == 'AvailableMB'\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Available Memory\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"unit\":4,\"min\":0,\"max\":null}}},\"customWidth\":\"100\",\"name\":\"Available Memory\"}],\"exportParameters\":true},\"customWidth\":\"100\",\"name\":\"Memory Metrics\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"### Network\"},\"customWidth\":\"100\",\"name\":\"text - 12 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let memorySummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == 'Network' and Name == 'WriteBytesPerSecond'\\r\\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer, Name\\r\\n    //| top 10 by {aggregateLeftLabel} {aggregateOrderLeft}\\r\\n    );\\r\\nlet computerList=(memorySummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'Network' and Name == 'WriteBytesPerSecond'\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"showAnnotations\":true,\"title\":\"Bytes Sent Rate\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"unit\":2,\"min\":0,\"max\":null}}},\"customWidth\":\"50\",\"name\":\"Bytes Sent Rate\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let memorySummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == 'Network' and Name == 'ReadBytesPerSecond'\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(memorySummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'Network' and Name == 'ReadBytesPerSecond'\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"showAnnotations\":true,\"title\":\"Bytes Received Rate\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"unit\":2,\"min\":0,\"max\":null}}},\"customWidth\":\"50\",\"name\":\"Bytes Received Rate\"}],\"exportParameters\":true},\"customWidth\":\"100\",\"name\":\"Network Metrics\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"### Disk\"},\"customWidth\":\"100\",\"name\":\"text - 12 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let memorySummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == 'LogicalDisk' and Name == 'FreeSpacePercentage'\\r\\n\\t| extend Val = 100 - Val\\r\\n    | summarize hint.shufflekey=Computer {aggregateLeftValue} by Computer, Name\\r\\n    //| top 10 by {aggregateLeftLabel} {aggregateOrderLeft}\\r\\n    );\\r\\nlet computerList=(memorySummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'FreeSpacePercentage'\\r\\n\\t| extend Val = 100 - Val\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateLeftValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk Space Used %\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"unit\":1,\"min\":0,\"max\":100}}},\"customWidth\":\"50\",\"name\":\"Logical Disk Space Used %\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let diskSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == 'LogicalDisk' and Name == 'TransfersPerSecond'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(diskSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'TransfersPerSecond'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk IOPS\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"numberFormatSettings\":{\"unit\":17,\"options\":{\"style\":\"decimal\"}},\"min\":0}}},\"customWidth\":\"50\",\"name\":\"Logical Disk IOPS\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let diskSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == \\\"LogicalDisk\\\" and Name == \\\"BytesPerSecond\\\"\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(diskSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'BytesPerSecond'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk Data Rate\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"numberFormatSettings\":{\"unit\":2,\"options\":{\"style\":\"decimal\"}},\"min\":0}}},\"customWidth\":\"100\",\"name\":\"Logical Disk Data Rate\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let diskSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == \\\"LogicalDisk\\\" and Name == \\\"ReadBytesPerSecond\\\"\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(diskSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'ReadBytesPerSecond'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk Read Bytes Per Second\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"numberFormatSettings\":{\"unit\":11,\"options\":{\"style\":\"decimal\"}},\"min\":0}}},\"customWidth\":\"50\",\"name\":\"Logical Disk Read Bytes Per Second\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let diskSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == \\\"LogicalDisk\\\" and Name == \\\"WriteBytesPerSecond\\\"\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(diskSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'WriteBytesPerSecond'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk Write Bytes Per Second\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"numberFormatSettings\":{\"unit\":11,\"options\":{\"style\":\"decimal\"}},\"min\":0}}},\"customWidth\":\"50\",\"name\":\"Logical Disk Write Bytes Per Second\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let diskSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == \\\"LogicalDisk\\\" and Name == \\\"TransferLatencyMs\\\"\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(diskSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'TransferLatencyMs'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk Transfer Latency\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"numberFormatSettings\":{\"unit\":23,\"options\":{\"style\":\"decimal\"}},\"min\":0}}},\"customWidth\":\"100\",\"name\":\"Logical Disk Transfer Latency\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let diskSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == \\\"LogicalDisk\\\" and Name == \\\"ReadLatencyMs\\\"\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(diskSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'ReadLatencyMs'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk Read Latency\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"numberFormatSettings\":{\"unit\":23,\"options\":{\"style\":\"decimal\"}},\"min\":0}}},\"customWidth\":\"50\",\"name\":\"Logical Disk Read Latency\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let diskSummary=totable(InsightsMetrics\\r\\n   {ComputerFilter}\\r\\n    | where TimeGenerated {TimeRange} \\r\\n    | where Namespace == \\\"LogicalDisk\\\" and Name == \\\"WriteLatencyMs\\\"\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | summarize hint.shufflekey=Computer {aggregateRightValue} by Computer, Name\\r\\n    //| top 10 by {aggregateRightLabel} {aggregateOrderRight}\\r\\n    );\\r\\nlet computerList=(diskSummary \\r\\n    | project Computer);\\r\\nlet EmptyNodeIdentityAndProps = datatable(Computer:string, NodeId:string, NodeProps:dynamic, Priority: long) [];\\r\\nlet OmsNodeIdentityAndProps = computerList\\r\\n    | extend NodeId = Computer\\r\\n    | extend Priority = 1\\r\\n    | extend NodeProps = pack('type', 'StandAloneNode', 'name', Computer);\\r\\nlet ServiceMapNodeIdentityAndProps = VMComputer | extend ResourceId=strcat('machines/', Machine) | extend Bitness=columnifexists('Bitness', '')\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Computer in (computerList)\\r\\n    | summarize arg_max(TimeGenerated, *) by Computer\\r\\n    | extend AzureCloudServiceNodeIdentity = iif(isnotempty(AzureCloudServiceName), strcat(AzureCloudServiceInstanceId, '|',                     AzureCloudServiceDeployment), ''),          AzureScaleSetNodeIdentity = iif(isnotempty(AzureVmScaleSetName),              strcat(AzureVmScaleSetInstanceId, '|',                     AzureVmScaleSetDeployment), ''),          ComputerProps =              pack('type', 'StandAloneNode',                   'name', Computer,                   'mappingResourceId', ResourceId,                   'subscriptionId', AzureSubscriptionId,                   'resourceGroup', AzureResourceGroup,                   'azureResourceId', columnifexists('_ResourceId', '')),          AzureCloudServiceNodeProps =              pack('type', 'AzureCloudServiceNode',                   'cloudServiceInstanceId', AzureCloudServiceInstanceId,                   'cloudServiceRoleName', columnifexists('AzureCloudServiceRoleName', ''),                   'cloudServiceDeploymentId', AzureCloudServiceDeployment,                   'cloudServiceName', AzureCloudServiceName,                   'mappingResourceId', ResourceId),          AzureScaleSetNodeProps =               pack('type', 'AzureScaleSetNode',                   'scaleSetInstanceId', columnifexists('Computer', ''),                   'vmScaleSetDeploymentId', AzureVmScaleSetDeployment,                   'vmScaleSetName', AzureVmScaleSetName,                   'serviceFabricClusterName', AzureServiceFabricClusterName,                   'vmScaleSetResourceId', AzureVmScaleSetResourceId,                   'resourceGroupName', columnifexists('AzureResourceGroup', ''),                   'subscriptionId', columnifexists('AzureSubscriptionId', ''),                   'mappingResourceId', ResourceId)| project   Computer,            NodeId = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeIdentity,                       isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeIdentity, Computer),            NodeProps = case(isnotempty(AzureCloudServiceNodeIdentity), AzureCloudServiceNodeProps,                          isnotempty(AzureScaleSetNodeIdentity), AzureScaleSetNodeProps, ComputerProps),            Priority = 2;\\r\\nlet NodeIdentityAndProps = union kind=inner isfuzzy = true                                  EmptyNodeIdentityAndProps, OmsNodeIdentityAndProps, ServiceMapNodeIdentityAndProps                            \\r\\n    | summarize arg_max(Priority, *) by Computer; \\r\\nlet NodeIdentityAndPropsMin = NodeIdentityAndProps\\r\\n    | extend Kind = iff(NodeProps.type == \\\"StandAloneNode\\\", iff(NodeProps.azureResourceId == \\\"\\\", \\\"Non-Azure Virtual Machine\\\", \\\"Azure Virtual Machine\\\"), NodeProps.type), \\r\\n    ResourceId = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.vmScaleSetResourceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceDeploymentId, Computer)),\\r\\n    ResourceName = iff(NodeProps.type == \\\"AzureScaleSetNode\\\", NodeProps.scaleSetInstanceId, \\r\\n        iff(NodeProps.type == \\\"AzureCloudServiceNode\\\", NodeProps.cloudServiceInstanceId, Computer))\\r\\n    | project Computer, Kind, ResourceId, ResourceName;\\r\\nInsightsMetrics\\r\\n    | where TimeGenerated {TimeRange}\\r\\n    | where Namespace == 'LogicalDisk' and Name == 'WriteLatencyMs'\\r\\n    | extend Disk=tostring(todynamic(Tags)[\\\"vm.azm.ms/mountId\\\"])\\r\\n    | where Computer in (computerList)\\r\\n    | join kind=leftouter (NodeIdentityAndPropsMin) on Computer\\r\\n    | summarize {aggregateRightValue} by bin(TimeGenerated, ({TimeRange:end} - {TimeRange:start})/100), ResourceName\",\"size\":0,\"aggregation\":3,\"showAnnotations\":true,\"title\":\"Logical Disk Write Latency\",\"noDataMessage\":\"There is no data for this counter, either enable the counter or onboard machines to this workspace\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspaces}\"],\"visualization\":\"linechart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Computer\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"value\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"ySettings\":{\"numberFormatSettings\":{\"unit\":23,\"options\":{\"style\":\"decimal\"}},\"min\":0}}},\"customWidth\":\"50\",\"name\":\"Logical Disk Write Latency\"}],\"exportParameters\":true},\"customWidth\":\"100\",\"name\":\"Disk Metrics\"}],\"exportParameters\":true},\"customWidth\":\"100\",\"name\":\"CPU, Memory, Network, and Disk Metrics\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"azure monitor\"],\"fromTemplateId\":\"community-Workbooks/Virtual Machines - Performance Analysis/Performance Analysis for a Group of VMs\"}",
                "version": "1.0",
                "sourceId": "[parameters('workbookSourceId')]",
                "category": "[parameters('workbookType')]"
            }
        }
    ],
    "outputs": {
        "workbookId": {
            "type": "string",
            "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
        }
    }
}